// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type EventGroupTag string

const (
	EventGroupTagGroup EventGroupTag = "group"
)

func (e EventGroupTag) ToPointer() *EventGroupTag {
	return &e
}

func (e *EventGroupTag) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "group":
		*e = EventGroupTag(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EventGroupTag: %v", v)
	}
}

type EventGroupEventGroup string

const (
	EventGroupEventGroupAll EventGroupEventGroup = "all"
)

func (e EventGroupEventGroup) ToPointer() *EventGroupEventGroup {
	return &e
}

func (e *EventGroupEventGroup) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		*e = EventGroupEventGroup(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EventGroupEventGroup: %v", v)
	}
}

type EventGroup struct {
	DotTag     EventGroupTag        `json:".tag"`
	EventGroup EventGroupEventGroup `json:"event_group"`
}

func (o *EventGroup) GetDotTag() EventGroupTag {
	if o == nil {
		return EventGroupTag("")
	}
	return o.DotTag
}

func (o *EventGroup) GetEventGroup() EventGroupEventGroup {
	if o == nil {
		return EventGroupEventGroup("")
	}
	return o.EventGroup
}
