// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type EventListTag string

const (
	EventListTagList EventListTag = "list"
)

func (e EventListTag) ToPointer() *EventListTag {
	return &e
}

func (e *EventListTag) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "list":
		*e = EventListTag(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EventListTag: %v", v)
	}
}

type EventListEventList string

const (
	EventListEventListPayment                EventListEventList = "payment"
	EventListEventListCredit                 EventListEventList = "credit"
	EventListEventListCapture                EventListEventList = "capture"
	EventListEventListVoid                   EventListEventList = "void"
	EventListEventListAuth                   EventListEventList = "auth"
	EventListEventListPending                EventListEventList = "pending"
	EventListEventListRejectedIrreversible   EventListEventList = "rejected_irreversible"
	EventListEventListRejectedReversible     EventListEventList = "rejected_reversible"
	EventListEventListFailedPayment          EventListEventList = "failed_payment"
	EventListEventListNewsletterSubscription EventListEventList = "newsletter_subscription"
	EventListEventListRiskInsights           EventListEventList = "risk_insights"
	EventListEventListCreditCardDeleted      EventListEventList = "credit_card_deleted"
)

func (e EventListEventList) ToPointer() *EventListEventList {
	return &e
}

func (e *EventListEventList) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment":
		fallthrough
	case "credit":
		fallthrough
	case "capture":
		fallthrough
	case "void":
		fallthrough
	case "auth":
		fallthrough
	case "pending":
		fallthrough
	case "rejected_irreversible":
		fallthrough
	case "rejected_reversible":
		fallthrough
	case "failed_payment":
		fallthrough
	case "newsletter_subscription":
		fallthrough
	case "risk_insights":
		fallthrough
	case "credit_card_deleted":
		*e = EventListEventList(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EventListEventList: %v", v)
	}
}

type EventList struct {
	DotTag    EventListTag         `json:".tag"`
	EventList []EventListEventList `json:"event_list"`
}

func (o *EventList) GetDotTag() EventListTag {
	if o == nil {
		return EventListTag("")
	}
	return o.DotTag
}

func (o *EventList) GetEventList() []EventListEventList {
	if o == nil {
		return []EventListEventList{}
	}
	return o.EventList
}
