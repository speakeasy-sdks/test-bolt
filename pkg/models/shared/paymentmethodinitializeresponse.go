// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Method string

const (
	MethodGet  Method = "GET"
	MethodPost Method = "POST"
)

func (e Method) ToPointer() *Method {
	return &e
}

func (e *Method) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GET":
		fallthrough
	case "POST":
		*e = Method(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Method: %v", v)
	}
}

type PaymentMethodInitializeResponseType string

const (
	PaymentMethodInitializeResponseTypeRedirect PaymentMethodInitializeResponseType = "redirect"
	PaymentMethodInitializeResponseTypeFinalize PaymentMethodInitializeResponseType = "finalize"
)

func (e PaymentMethodInitializeResponseType) ToPointer() *PaymentMethodInitializeResponseType {
	return &e
}

func (e *PaymentMethodInitializeResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redirect":
		fallthrough
	case "finalize":
		*e = PaymentMethodInitializeResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentMethodInitializeResponseType: %v", v)
	}
}

type Action struct {
	Method *Method                              `json:"method,omitempty"`
	Type   *PaymentMethodInitializeResponseType `json:"type,omitempty"`
	URL    *string                              `json:"url,omitempty"`
}

func (o *Action) GetMethod() *Method {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *Action) GetType() *PaymentMethodInitializeResponseType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Action) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

type Status string

const (
	StatusAwaitingUserConfirmation Status = "awaiting_user_confirmation"
	StatusPaymentReady             Status = "payment_ready"
	StatusUpdatePaymentMethod      Status = "update_payment_method"
	StatusSuccess                  Status = "success"
)

func (e Status) ToPointer() *Status {
	return &e
}

func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "awaiting_user_confirmation":
		fallthrough
	case "payment_ready":
		fallthrough
	case "update_payment_method":
		fallthrough
	case "success":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type PaymentMethodInitializeResponse struct {
	Action *Action `json:"action,omitempty"`
	ID     *string `json:"id,omitempty"`
	Status *Status `json:"status,omitempty"`
}

func (o *PaymentMethodInitializeResponse) GetAction() *Action {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *PaymentMethodInitializeResponse) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PaymentMethodInitializeResponse) GetStatus() *Status {
	if o == nil {
		return nil
	}
	return o.Status
}
