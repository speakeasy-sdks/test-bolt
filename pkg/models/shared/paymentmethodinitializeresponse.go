// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PaymentMethodInitializeResponseActionMethod string

const (
	PaymentMethodInitializeResponseActionMethodGet  PaymentMethodInitializeResponseActionMethod = "GET"
	PaymentMethodInitializeResponseActionMethodPost PaymentMethodInitializeResponseActionMethod = "POST"
)

func (e PaymentMethodInitializeResponseActionMethod) ToPointer() *PaymentMethodInitializeResponseActionMethod {
	return &e
}

func (e *PaymentMethodInitializeResponseActionMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GET":
		fallthrough
	case "POST":
		*e = PaymentMethodInitializeResponseActionMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentMethodInitializeResponseActionMethod: %v", v)
	}
}

type PaymentMethodInitializeResponseActionType string

const (
	PaymentMethodInitializeResponseActionTypeRedirect PaymentMethodInitializeResponseActionType = "redirect"
	PaymentMethodInitializeResponseActionTypeFinalize PaymentMethodInitializeResponseActionType = "finalize"
)

func (e PaymentMethodInitializeResponseActionType) ToPointer() *PaymentMethodInitializeResponseActionType {
	return &e
}

func (e *PaymentMethodInitializeResponseActionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redirect":
		fallthrough
	case "finalize":
		*e = PaymentMethodInitializeResponseActionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentMethodInitializeResponseActionType: %v", v)
	}
}

type PaymentMethodInitializeResponseAction struct {
	Method *PaymentMethodInitializeResponseActionMethod `json:"method,omitempty"`
	Type   *PaymentMethodInitializeResponseActionType   `json:"type,omitempty"`
	URL    *string                                      `json:"url,omitempty"`
}

func (o *PaymentMethodInitializeResponseAction) GetMethod() *PaymentMethodInitializeResponseActionMethod {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *PaymentMethodInitializeResponseAction) GetType() *PaymentMethodInitializeResponseActionType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *PaymentMethodInitializeResponseAction) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

type PaymentMethodInitializeResponseStatus string

const (
	PaymentMethodInitializeResponseStatusAwaitingUserConfirmation PaymentMethodInitializeResponseStatus = "awaiting_user_confirmation"
	PaymentMethodInitializeResponseStatusPaymentReady             PaymentMethodInitializeResponseStatus = "payment_ready"
	PaymentMethodInitializeResponseStatusUpdatePaymentMethod      PaymentMethodInitializeResponseStatus = "update_payment_method"
	PaymentMethodInitializeResponseStatusSuccess                  PaymentMethodInitializeResponseStatus = "success"
)

func (e PaymentMethodInitializeResponseStatus) ToPointer() *PaymentMethodInitializeResponseStatus {
	return &e
}

func (e *PaymentMethodInitializeResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "awaiting_user_confirmation":
		fallthrough
	case "payment_ready":
		fallthrough
	case "update_payment_method":
		fallthrough
	case "success":
		*e = PaymentMethodInitializeResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentMethodInitializeResponseStatus: %v", v)
	}
}

type PaymentMethodInitializeResponse struct {
	Action *PaymentMethodInitializeResponseAction `json:"action,omitempty"`
	ID     *string                                `json:"id,omitempty"`
	Status *PaymentMethodInitializeResponseStatus `json:"status,omitempty"`
}

func (o *PaymentMethodInitializeResponse) GetAction() *PaymentMethodInitializeResponseAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *PaymentMethodInitializeResponse) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PaymentMethodInitializeResponse) GetStatus() *PaymentMethodInitializeResponseStatus {
	if o == nil {
		return nil
	}
	return o.Status
}
