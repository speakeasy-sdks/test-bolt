// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/test-bolt/pkg/utils"
	"time"
)

// ShipmentTrackingUpdateStatus - The shipment's status.
type ShipmentTrackingUpdateStatus string

const (
	ShipmentTrackingUpdateStatusInTransit ShipmentTrackingUpdateStatus = "in_transit"
	ShipmentTrackingUpdateStatusCancelled ShipmentTrackingUpdateStatus = "cancelled"
	ShipmentTrackingUpdateStatusFailure   ShipmentTrackingUpdateStatus = "failure"
	ShipmentTrackingUpdateStatusDelivered ShipmentTrackingUpdateStatus = "delivered"
)

func (e ShipmentTrackingUpdateStatus) ToPointer() *ShipmentTrackingUpdateStatus {
	return &e
}

func (e *ShipmentTrackingUpdateStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "in_transit":
		fallthrough
	case "cancelled":
		fallthrough
	case "failure":
		fallthrough
	case "delivered":
		*e = ShipmentTrackingUpdateStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ShipmentTrackingUpdateStatus: %v", v)
	}
}

type ShipmentTrackingUpdateTrackingDetailsStatus string

const (
	ShipmentTrackingUpdateTrackingDetailsStatusUnknown            ShipmentTrackingUpdateTrackingDetailsStatus = "unknown"
	ShipmentTrackingUpdateTrackingDetailsStatusPreTransit         ShipmentTrackingUpdateTrackingDetailsStatus = "pre_transit"
	ShipmentTrackingUpdateTrackingDetailsStatusInTransit          ShipmentTrackingUpdateTrackingDetailsStatus = "in_transit"
	ShipmentTrackingUpdateTrackingDetailsStatusOutForDelivery     ShipmentTrackingUpdateTrackingDetailsStatus = "out_for_delivery"
	ShipmentTrackingUpdateTrackingDetailsStatusDelivered          ShipmentTrackingUpdateTrackingDetailsStatus = "delivered"
	ShipmentTrackingUpdateTrackingDetailsStatusAvailableForPickup ShipmentTrackingUpdateTrackingDetailsStatus = "available_for_pickup"
	ShipmentTrackingUpdateTrackingDetailsStatusReturnToSender     ShipmentTrackingUpdateTrackingDetailsStatus = "return_to_sender"
	ShipmentTrackingUpdateTrackingDetailsStatusFailure            ShipmentTrackingUpdateTrackingDetailsStatus = "failure"
	ShipmentTrackingUpdateTrackingDetailsStatusCancelled          ShipmentTrackingUpdateTrackingDetailsStatus = "cancelled"
	ShipmentTrackingUpdateTrackingDetailsStatusError              ShipmentTrackingUpdateTrackingDetailsStatus = "error"
)

func (e ShipmentTrackingUpdateTrackingDetailsStatus) ToPointer() *ShipmentTrackingUpdateTrackingDetailsStatus {
	return &e
}

func (e *ShipmentTrackingUpdateTrackingDetailsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unknown":
		fallthrough
	case "pre_transit":
		fallthrough
	case "in_transit":
		fallthrough
	case "out_for_delivery":
		fallthrough
	case "delivered":
		fallthrough
	case "available_for_pickup":
		fallthrough
	case "return_to_sender":
		fallthrough
	case "failure":
		fallthrough
	case "cancelled":
		fallthrough
	case "error":
		*e = ShipmentTrackingUpdateTrackingDetailsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ShipmentTrackingUpdateTrackingDetailsStatus: %v", v)
	}
}

type ShipmentTrackingUpdateTrackingDetails struct {
	// The country associated this this set of tracking details, if any.
	CountryCode *string `json:"country_code,omitempty"`
	// The tracking detail's timestamp.
	EventDate *string `json:"event_date,omitempty"`
	// The locality associated this this set of tracking details, if any.
	Locality *string `json:"locality,omitempty"`
	// An arbitrary, human-readable message associated with this set of tracking details.
	Message *string `json:"message,omitempty"`
	// The postal associated this this set of tracking details, if any.
	PostalCode *string `json:"postal_code,omitempty"`
	// The region associated this this set of tracking details, if any.
	Region *string                                      `json:"region,omitempty"`
	Status *ShipmentTrackingUpdateTrackingDetailsStatus `json:"status,omitempty"`
}

func (o *ShipmentTrackingUpdateTrackingDetails) GetCountryCode() *string {
	if o == nil {
		return nil
	}
	return o.CountryCode
}

func (o *ShipmentTrackingUpdateTrackingDetails) GetEventDate() *string {
	if o == nil {
		return nil
	}
	return o.EventDate
}

func (o *ShipmentTrackingUpdateTrackingDetails) GetLocality() *string {
	if o == nil {
		return nil
	}
	return o.Locality
}

func (o *ShipmentTrackingUpdateTrackingDetails) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *ShipmentTrackingUpdateTrackingDetails) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *ShipmentTrackingUpdateTrackingDetails) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *ShipmentTrackingUpdateTrackingDetails) GetStatus() *ShipmentTrackingUpdateTrackingDetailsStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

type ShipmentTrackingUpdate struct {
	// The shipment's actual or estimated delivery date.
	DeliveryDate *time.Time `json:"delivery_date,omitempty"`
	// The shipment's status.
	Status ShipmentTrackingUpdateStatus `json:"status"`
	// A list of tracking updates that contain the shipment's status, location, and any unique messages.
	TrackingDetails []ShipmentTrackingUpdateTrackingDetails `json:"tracking_details"`
	// The carrier's tracking number for the shipment. Must be prefixed with `MockBolt`.
	TrackingNumber string `json:"tracking_number"`
}

func (s ShipmentTrackingUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *ShipmentTrackingUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ShipmentTrackingUpdate) GetDeliveryDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.DeliveryDate
}

func (o *ShipmentTrackingUpdate) GetStatus() ShipmentTrackingUpdateStatus {
	if o == nil {
		return ShipmentTrackingUpdateStatus("")
	}
	return o.Status
}

func (o *ShipmentTrackingUpdate) GetTrackingDetails() []ShipmentTrackingUpdateTrackingDetails {
	if o == nil {
		return []ShipmentTrackingUpdateTrackingDetails{}
	}
	return o.TrackingDetails
}

func (o *ShipmentTrackingUpdate) GetTrackingNumber() string {
	if o == nil {
		return ""
	}
	return o.TrackingNumber
}
